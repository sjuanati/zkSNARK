1) Start a new powers of tau ceremony:
    snarkjs powersoftau new bn128 12 pot12_0000.ptau -v
2) Contribute to the ceremony:
    snarkjs powersoftau contribute pot12_0000.ptau pot12_0001.ptau --name="First contribution" -v
3) Provide a second contribution:
    snarkjs powersoftau contribute pot12_0001.ptau pot12_0002.ptau --name="Second contribution" -v -e="some random text"
4) Verify the protocol so far:
    snarkjs powersoftau verify pot12_0002.ptau
5) Apply a random beacon:
    snarkjs powersoftau beacon pot12_0002.ptau pot12_beacon.ptau 0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f 10 -n="Final Beacon"
6) Prepare phase 2:
    snarkjs powersoftau prepare phase2 pot12_beacon.ptau pot12_final.ptau -v
7) Verify the final ptau:
    snarkjs powersoftau verify pot12_final.ptau
8) Create the circuit in a new file: 
    circuit.circom
9) Compile the circuit:
    circom circuit.circom --r1cs --wasm --sym
10) View information about the circuit:
    snarkjs r1cs info circuit.r1cs
11) Print the constraints:
    snarkjs r1cs print circuit.r1cs circuit.sym
12) Generate the reference zkey without phase 2 contributions:
    snarkjs zkey new circuit.r1cs pot12_final.ptau circuit_0000.zkey
13) Contribute to the phase 2 ceremony:
    snarkjs zkey contribute circuit_0000.zkey circuit_0001.zkey --name="1st Contributor Name" -v
14) Provide a second contribution:
    snarkjs zkey contribute circuit_0001.zkey circuit_0002.zkey --name="Second contribution Name" -v -e="Another random entropy"
15) Verify the latest zkey:
    snarkjs zkey verify circuit.r1cs pot12_final.ptau circuit_0002.zkey
16) Apply a random beacon:
    snarkjs zkey beacon circuit_0002.zkey circuit_final.zkey 0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f 10 -n="Final Beacon phase2"
17) Verify the final zkey:
    snarkjs zkey verify circuit.r1cs pot12_final.ptau circuit_final.zkey
18) Export the verification key
    snarkjs zkey export verificationkey circuit_final.zkey verification_key.json
19) Create input.json and Calculate the witness:
    E.g. input: {"a": 3, "b": 11}
    snarkjs wtns calculate circuit.wasm input.json witness.wtns
20) Debug the final witness calculation:
    snarkjs wtns debug circuit.wasm input.json witness.wtns circuit.sym --trigger --get --set
21) Create the proof:
    snarkjs groth16 prove circuit_final.zkey witness.wtns proof.json public.json
22) Verify the proof:
    snarkjs groth16 verify verification_key.json public.json proof.json
23) Turn the verifier into a smart contract:
    snarkjs zkey export solidityverifier circuit_final.zkey verifier.sol
24) Simulate a verification call:
    snarkjs zkey export soliditycalldata public.json proof.json